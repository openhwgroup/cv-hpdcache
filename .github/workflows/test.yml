##
#  Copyright 2023,2024 Cesar Fuguet
#
#  SPDX-License-Identifier: Apache-2.0 WITH SHL-2.1
#
#  Licensed under the Solderpad Hardware License v 2.1 (the “License”); you
#  may not use this file except in compliance with the License, or, at your
#  option, the Apache License version 2.0. You may obtain a copy of the
#  License at
#
#  https://solderpad.org/licenses/SHL-2.1/
#
#  Unless required by applicable law or agreed to in writing, any work
#  distributed under the License is distributed on an “AS IS” BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.
##
##
#  Author     : Cesar Fuguet
#  Date       : October, 2024
#  Description: GitHub Action to run tests on pull requests and pushes
##
name: HPDcache Test CI
on:
  push:
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - 'CODEOWNERS'
      - 'LICENSE'

  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - 'CODEOWNERS'
      - 'LICENSE'

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      #  Install Dependencies
      - name: Install Dependencies
        shell: bash
        run: |
          ./.github/scripts/install_deps_ubuntu.sh

      #  Install SystemC
      - name: Cache SystemC
        id: cache-systemc
        uses: actions/cache@v4
        with:
          path: build/systemc-3.0.1
          key: ${{ runner.os }}-build-systemc-${{ hashFiles('.github/scripts/install_systemc.sh') }}

      - name: Install SystemC
        shell: bash
        run: |
          . .github/scripts/env.sh
          ./.github/scripts/install_systemc.sh

      #  Install Verilator
      - name: Cache Verilator
        id: cache-verilator
        uses: actions/cache@v4
        with:
          path: build/verilator-v5.028
          key: ${{ runner.os }}-build-verilator-${{ hashFiles('.github/scripts/install_verilator.sh') }}

      - name: Install Verilator
        shell: bash
        run: |
          . .github/scripts/env.sh
          ./.github/scripts/install_verilator.sh


  #  Run the tests
  run_random_short:
    runs-on: ubuntu-latest
    name: run_random_short
    needs: build
    steps:
      - uses: actions/checkout@master

      - id: run_random_short_sequence
        uses: ./.github/actions/run_sequence
        with:
          seqname: 'random'
          ntrans: '10000'
          ntests: '64'
          config: 'configs/default_config.mk'

  run_random_long:
    runs-on: ubuntu-latest
    name: run_random_long
    needs: build
    steps:
      - uses: actions/checkout@master

      - id: run_random_long_sequence
        uses: ./.github/actions/run_sequence
        with:
          seqname: 'random'
          ntrans: '80000'
          ntests: '8'
          config: 'configs/default_config.mk'

  run_unique_set:
    runs-on: ubuntu-latest
    name: run_unique_set
    needs: build
    steps:
      - uses: actions/checkout@master

      - id: run_unique_set_sequence
        uses: ./.github/actions/run_sequence
        with:
          seqname: 'unique_set'
          ntrans: '20000'
          ntests: '16'
          config: 'configs/default_config.mk'

  run_random_short_hpc:
    runs-on: ubuntu-latest
    name: run_random_short_hpc
    needs: build
    steps:
      - uses: actions/checkout@master

      - id: run_random_short_sequence
        uses: ./.github/actions/run_sequence
        with:
          seqname: 'random'
          ntrans: '10000'
          ntests: '64'
          config: 'configs/hpc_config.mk'

  run_random_long_hpc:
    runs-on: ubuntu-latest
    name: run_random_long_hpc
    needs: build
    steps:
      - uses: actions/checkout@master

      - id: run_random_long_sequence
        uses: ./.github/actions/run_sequence
        with:
          seqname: 'random'
          ntrans: '80000'
          ntests: '8'
          config: 'configs/hpc_config.mk'

  run_unique_set_hpc:
    runs-on: ubuntu-latest
    name: run_unique_set_hpc
    needs: build
    steps:
      - uses: actions/checkout@master

      - id: run_unique_set_sequence
        uses: ./.github/actions/run_sequence
        with:
          seqname: 'unique_set'
          ntrans: '20000'
          ntests: '16'
          config: 'configs/hpc_config.mk'

  run_random_short_embedded:
    runs-on: ubuntu-latest
    name: run_random_short_embedded
    needs: build
    steps:
      - uses: actions/checkout@master

      - id: run_random_short_sequence
        uses: ./.github/actions/run_sequence
        with:
          seqname: 'random'
          ntrans: '10000'
          ntests: '64'
          config: 'configs/embedded_config.mk'

  run_random_long_embedded:
    runs-on: ubuntu-latest
    name: run_random_long_embedded
    needs: build
    steps:
      - uses: actions/checkout@master

      - id: run_random_long_sequence
        uses: ./.github/actions/run_sequence
        with:
          seqname: 'random'
          ntrans: '80000'
          ntests: '8'
          config: 'configs/embedded_config.mk'

  run_unique_set_embedded:
    runs-on: ubuntu-latest
    name: run_unique_set_embedded
    needs: build
    steps:
      - uses: actions/checkout@master

      - id: run_unique_set_sequence
        uses: ./.github/actions/run_sequence
        with:
          seqname: 'unique_set'
          ntrans: '20000'
          ntests: '16'
          config: 'configs/embedded_config.mk'

  run_trace:
    runs-on: ubuntu-latest
    name: run_trace
    needs: build
    steps:
      - uses: actions/checkout@master

      - id: run_trace_sequence 
        uses: ./.github/actions/run_sequence
        with:
          seqname: 'from_file'
          ntrans: '800000'
          ntests: '1'
          filename: 'trace_qemu'
          config: 'configs/default_config.mk'
      - name: verify_perf
        continue-on-error: true
        run: |
          file=$(find . -name *from_file*.log)
          prev_data=$(cat current_perf.txt)
          prev_cycle=$(echo $prev_data | grep cycle | cut -d "=" -f 2)
          prev_read=$(echo $prev_data | grep read | cut -d "=" -f 2)
          prev_write=$(echo $prev_data | grep write | cut -d "=" -f 2)
          nb_read_miss=$(cat $file | grep "Read miss rate" | tr -s " " | cut -d " " -f 5)
          nb_write_miss=$(cat $file | grep "Write miss rate" | tr -s " " | cut -d " " -f 5)
          nb_cycle_execution=$(cat $file  | grep SB.NB_CYCLES | tr -s " " | cut -d " " -f 3)

          echo "read = $nb_read_miss write = $nb_write_miss "
          if (( $(echo "$nb_read_miss > $prev_read"  | bc -l) ))
          then
            echo -e  "\033[31mThe percentage of miss on read has grow\033[0m"
            echo ::set-output name=exit_code::1
          fi
          if (( $(echo "$nb_write_miss > $prev_write"  | bc -l) ))
          if [ "$res" -eq 1 ]
          then
            echo -e  "\033[31mThe percentage of miss on write has grow\033[0m"
            echo ::set-output name=exit_code::2
          fi
          if (( $(echo "$nb_cycle_execution > $prev_cycle"  | bc -l) ))
          then
            echo -e  "\033[31mThe number of cycle has grow\033[0m"
            echo ::set-output name=exit_code::3
          fi

      - name: Put a comment 
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "ça passe "
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")

          COMMENT=" Pipeline has failed due to a decrease in performance."

          curl -s -H "Authorization: token $GITHUB_TOKEN" \
               -H "Content-Type: application/json" \
               -X POST \
               -d "{\"body\": \"$COMMENT\"}" \
               "https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/comments"

